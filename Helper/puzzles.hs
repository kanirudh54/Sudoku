import Data.List as L
import qualified System.Random as Rand
import System.IO.Unsafe

domain = [1,2,3,4,5,6,7,8,9]
puzzle1d = [0,0,0,4,0,0,0,3,0,0,0,4,0,0,7,1,0,2,8,0,0,0,0,0,0,4,0,1,9,0,8,0,0,4,0,6,0,0,0,9,0,2,0,0,0,2,0,6,0,0,1,0,9,5,0,6,0,0,0,0,0,0,1,4,0,9,1,0,0,3,0,0,0,5,0,0,0,9,0,0,0]
puzzle2d = [0,5,0,0,3,0,9,0,0,0,3,9,4,0,0,0,0,0,0,0,0,0,0,9,6,4,0,0,6,0,0,0,8,4,0,0,5,0,0,0,0,0,0,0,8,0,0,1,9,0,0,0,2,0,0,8,2,6,0,0,0,0,0,0,0,0,0,0,5,7,6,0,0,0,5,0,9,0,0,8,0]
puzzle3d = [0,0,0,0,0,0,0,8,9,7,0,0,0,0,2,3,0,0,0,1,0,0,0,3,2,0,0,8,0,0,0,3,6,7,0,2,0,0,0,9,0,5,0,0,0,9,0,1,2,8,0,0,0,3,0,0,9,3,0,0,0,5,0,0,0,5,6,0,0,0,0,4,2,8,0,0,0,0,0,0,0]
puzzle4d = [0,0,8,9,7,0,0,5,0,7,3,0,0,0,2,0,0,0,6,0,0,0,0,0,7,0,0,4,0,0,3,0,0,0,0,8,3,0,0,0,9,0,0,0,7,8,0,0,0,0,5,0,0,1,0,0,2,0,0,0,0,0,5,0,0,0,2,0,0,0,4,9,0,7,0,0,8,3,1,0,0]
puzzle5d = [8,5,9,1,0,0,0,0,2,6,0,0,0,0,0,0,0,0,0,0,1,0,2,8,0,3,0,0,0,0,4,9,0,1,0,0,0,0,0,0,6,0,0,0,0,0,0,7,0,8,1,0,0,0,0,3,0,7,1,0,8,0,0,0,0,0,0,0,0,0,0,6,9,0,0,0,0,6,7,5,4]
puzzle6e = [0,0,7,0,0,0,3,0,6,6,0,0,4,0,0,2,7,0,0,5,2,0,1,6,0,8,0,0,0,0,1,0,7,0,3,8,0,7,8,0,0,0,5,9,0,2,6,0,8,0,5,0,0,0,0,2,0,5,8,0,1,6,0,0,3,1,0,0,9,0,0,7,8,0,6,0,0,0,4,0,0]
puzzle7e = [0,1,0,0,4,0,0,3,0,3,0,2,0,0,0,1,8,0,0,0,6,0,7,0,9,0,2,0,8,0,0,9,5,0,0,0,0,0,0,3,0,8,0,0,0,0,0,0,4,6,0,0,5,0,7,0,1,0,8,0,5,0,0,0,3,5,0,0,0,8,0,6,0,2,0,0,3,0,0,1,0]
puzzle8e = [0,0,9,0,0,0,0,3,0,3,0,0,0,0,9,0,0,2,0,5,2,0,3,1,0,7,0,0,0,4,2,5,0,0,0,0,2,9,0,0,0,0,0,5,1,0,0,0,0,1,3,2,0,0,0,8,0,3,4,0,5,1,0,5,0,0,1,0,0,0,0,6,0,1,0,0,0,0,8,0,0]
puzzle9e = [0,0,1,9,0,6,0,0,3,0,4,3,2,0,1,9,7,0,0,9,6,0,4,0,0,0,0,8,0,9,0,0,0,7,0,0,4,7,2,5,0,8,6,9,1,0,0,5,0,0,0,2,0,4,0,0,0,0,2,0,3,4,0,0,2,4,6,0,9,8,5,0,9,0,0,3,0,4,1,0,0]
puzzle10e =[6,0,0,0,0,0,0,0,0,0,3,9,4,0,0,6,0,2,1,0,0,3,7,0,0,0,8,0,0,2,0,6,3,1,5,0,7,0,8,0,1,0,3,0,9,0,1,5,7,4,0,2,0,0,8,0,0,0,5,4,0,0,3,9,0,1,0,0,8,7,6,0,0,0,0,0,0,0,0,0,4]
puzzles = [puzzle1d,puzzle2d,puzzle3d,puzzle4d,puzzle5d,puzzle6e,puzzle7e,puzzle8e,puzzle9e,puzzle10e]

--The Labelling Function
labelling ::[Integer] -> [([Char],Integer)]
labelling xs = labelling' xs 0 (L.length xs)

labelling' (x:xs) z y = [helper x z] L.++ (labelling' xs (z+1) (y-1))
labelling' [] z 0 = []

--Gives the (label,value)
helper x y =  ( "r" L.++ (rownum y) L.++ "c" L.++ (colnum y) , x )

--Gives row number and column number
rownum y =  (show ((quot y 9)+1) )
colnum y =  (show ((rem y 9)+1) )


fun [] = []
fun xs =
	let (a,b) = (L.splitAt 9 xs)
	in a:(fun b)


--Rand Element from puzzles
randelem xs = do
    index <- Rand.randomRIO (0,(length xs)-1)
    return (xs!!index)



--Converts to the format which the CSP solver understands
question xs =
    let x = randelem xs
        z = unsafePerformIO x
        y = labelling z
    in ((help y),z)    


help xs = [ (label,dom) | (label,value) <- xs, let dom = if (value==0) then domain else [value] ]  